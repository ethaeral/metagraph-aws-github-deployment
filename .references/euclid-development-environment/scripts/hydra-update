#!/usr/bin/env bash

check_if_container_is_running() {
  if docker ps --format '{{.Names}}' | grep "$1"; then
    echo You should stop the container $1 before update
    exit 1
  fi
}

checkout_version() {
  if [ ! -z "$(git ls-remote origin $1)" ]; then
    git pull &>/dev/null
    git checkout $1 &>/dev/null
    echo "Valid version"
  else
    echo "Invalid version"
    exit 1
  fi
}

# @cmd Update hydra
# @option --version!          Version
update() {
  echo "You should stop all containers before update"

  echo "Checking if any container is running ..."
  check_if_container_is_running global-l0-1

  check_if_container_is_running dag-l1-1
  check_if_container_is_running dag-l1-2
  check_if_container_is_running dag-l1-3

  check_if_container_is_running metagraph-l0-1
  check_if_container_is_running metagraph-l0-2
  check_if_container_is_running metagraph-l0-3
  
  check_if_container_is_running metagraph-l1-currency-1
  check_if_container_is_running metagraph-l1-currency-2
  check_if_container_is_running metagraph-l1-currency-3

  check_if_container_is_running metagraph-l1-data-1
  check_if_container_is_running metagraph-l1-data-2
  check_if_container_is_running metagraph-l1-data-3
  
  check_if_container_is_running grafana
  check_if_container_is_running prometheus

  echo "Starting update ..."

  BASEDIR=$(dirname "$0")
  cd $BASEDIR

  if [ -d "scripts" ]; then
    cd scripts/
  fi

  cd ../infra

  echo "Getting updated version"
  git clone --quiet https://github.com/Constellation-Labs/euclid-development-environment.git > /dev/null
  cd euclid-development-environment/
  checkout_version $argc_version
  cd ..

  echo "Updating docker folder ..."
  chmod +x docker
  rm -r docker

  cp -r euclid-development-environment/infra/docker .
  echo "Updated"

  echo "Updating hydra script ..."
  cd ../scripts

  chmod +x hydra
  rm hydra

  cp -r ../infra/euclid-development-environment/scripts/hydra .
  echo "Updated"

  chmod -R +w ../infra/euclid-development-environment
  rm -r ../infra/euclid-development-environment
  echo "Updating process finished!"
}

eval "$(argc --argc-eval "$0" "$@")"
